{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"laminas-paginator üá∑üá∫ –†—É—Å—Å–∫–∏–º –≥—Ä–∞–∂–¥–∞–Ω–∞–º –ú—ã, —É—á–∞—Å—Ç–Ω–∏–∫–∏ Laminas, —Ä–æ–¥–∏–ª–∏—Å—å –∏ –∂–∏–≤–µ–º –≤ —Ä–∞–∑–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∞—Ö. –£ –º–Ω–æ–≥–∏—Ö –∏–∑ –Ω–∞—Å –µ—Å—Ç—å –¥—Ä—É–∑—å—è, —Ä–æ–¥—Å—Ç–≤–µ–Ω–Ω–∏–∫–∏ –∏ –∫–æ–ª–ª–µ–≥–∏ –∫–∞–∫ –≤ –†–æ—Å—Å–∏–∏, —Ç–∞–∫ –∏ –≤ –£–∫—Ä–∞–∏–Ω–µ. –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∏–∑ –Ω–∞—Å —Ä–æ–¥–∏–ª–∏—Å—å –≤ –†–æ—Å—Å–∏–∏. –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∏–∑ –Ω–∞—Å –∂–∏–≤—É—Ç –≤ –†–æ—Å—Å–∏–∏. –£ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –±–∞–±—É—à–∫–∏ –∏ –¥–µ–¥—É—à–∫–∏ —Å—Ä–∞–∂–∞–ª–∏—Å—å —Å —Ñ–∞—à–∏—Å—Ç–∞–º–∏ –≤–æ –í—Ç–æ—Ä–æ–π –º–∏—Ä–æ–≤–æ–π –≤–æ–π–Ω–µ. –ó–¥–µ—Å—å –Ω–∏–∫—Ç–æ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ñ–∞—à–∏–∑–º. –£ –æ–¥–Ω–æ–≥–æ –∏–∑ –Ω–∞—Å –µ—Å—Ç—å —É–∫—Ä–∞–∏–Ω—Å–∫–∞—è —Ä–æ–¥—Å—Ç–≤–µ–Ω–Ω–∏—Ü–∞, –∫–æ—Ç–æ—Ä–∞—è —Å–ø–∞—Å–ª–∞—Å—å –∏–∑ –¥–æ–º–∞ –≤–º–µ—Å—Ç–µ —Å —Å—ã–Ω–æ–º. –ü–æ–µ–∑–¥ –∑–∞–¥–µ—Ä–∂–∞–ª—Å—è –∏–∑-–∑–∞ –±–æ–º–±–µ–∂–∫–∏ –Ω–∞ –¥–æ—Ä–æ–≥–µ –≤–ø–µ—Ä–µ–¥–∏. –£ –Ω–∞—Å –µ—Å—Ç—å –¥—Ä—É–∑—å—è, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä—è—á—É—Ç—Å—è –≤ –±–æ–º–±–æ—É–±–µ–∂–∏—â–∞—Ö. –ú—ã —Å —Ç—Ä–µ–≤–æ–≥–æ–π –∂–¥–µ–º –≤–µ—Å—Ç–æ—á–∫–∏ –æ—Ç –Ω–∏—Ö –ø–æ—Å–ª–µ –≤–æ–∑–¥—É—à–Ω—ã—Ö –Ω–∞–ª–µ—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –±–µ—Å–ø–æ—Ä—è–¥–æ—á–Ω–æ –Ω–∞–Ω–æ—Å—è—Ç —É–¥–∞—Ä—ã –∏ –ø–æ–ø–∞–¥–∞—é—Ç –ø–æ –±–æ–ª—å–Ω–∏—Ü–∞–º, —à–∫–æ–ª–∞–º, –¥–µ—Ç—Å–∫–∏–º —Å–∞–¥–∞–º –∏ –¥–æ–º–∞–º. –ú—ã –Ω–µ –±–µ—Ä–µ–º —ç—Ç–æ –∏–∑ –∫–∞–∫–∏—Ö-–ª–∏–±–æ –°–ú–ò. –ú—ã –Ω–∞–±–ª—é–¥–∞–µ–º —ç—Ç–æ –Ω–∞–ø—Ä—è–º—É—é. –í—ã –¥–æ–≤–µ—Ä—è–µ—Ç–µ –Ω–∞–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ, —á—Ç–æ–± –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–∞—à–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã, –∏ –º—ã –ø—Ä–æ—Å–∏–º –≤–∞—Å –¥–æ–≤–µ—Ä–∏—Ç—å—Å—è –Ω–∞–º –≤–Ω–æ–≤—å. –ú—ã –Ω—É–∂–¥–∞–µ–º—Å—è –≤ –ø–æ–º–æ—â–∏. –í—ã—Ö–æ–¥–∏—Ç–µ –∏ –ø—Ä–æ—Ç–µ—Å—Ç—É–π—Ç–µ –ø—Ä–æ—Ç–∏–≤ —ç—Ç–æ–π –±–µ—Å–ø–æ–ª–µ–∑–Ω–æ–π –≤–æ–π–Ω—ã. –û—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∫—Ä–æ–≤–æ–ø—Ä–æ–ª–∏—Ç–∏–µ. –°–∫–∞–∂–∏—Ç–µ \"–ù–µ—Ç –≤–æ–π–Ω–µ!\" üá∫üá∏ To Citizens of Russia We at Laminas come from all over the world. Many of us have friends, family and colleagues in both Russia and Ukraine. Some of us were born in Russia. Some of us currently live in Russia. Some have grandparents who fought Nazis in World War II. Nobody here supports fascism. One team member has a Ukrainian relative who fled her home with her son. The train was delayed due to bombing on the road ahead. We have friends who are hiding in bomb shelters. We anxiously follow up on them after the air raids, which indiscriminately fire at hospitals, schools, kindergartens and houses. We're not taking this from any media. These are our actual experiences. You trust us enough to use our software. We ask that you trust us to say the truth on this. We need your help. Go out and protest this unnecessary war. Stop the bloodshed. Say \"stop the war!\" laminas-paginator is a flexible component for paginating collections of data and presenting that data to users. Installation Run the following to install this library: $ composer require laminas/laminas-paginator Documentation Browse the documentation online at https://docs.laminas.dev/laminas-paginator/ Support Issues Chat Forum","title":"Home"},{"location":"#laminas-paginator","text":"","title":"laminas-paginator"},{"location":"#_1","text":"–ú—ã, —É—á–∞—Å—Ç–Ω–∏–∫–∏ Laminas, —Ä–æ–¥–∏–ª–∏—Å—å –∏ –∂–∏–≤–µ–º –≤ —Ä–∞–∑–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∞—Ö. –£ –º–Ω–æ–≥–∏—Ö –∏–∑ –Ω–∞—Å –µ—Å—Ç—å –¥—Ä—É–∑—å—è, —Ä–æ–¥—Å—Ç–≤–µ–Ω–Ω–∏–∫–∏ –∏ –∫–æ–ª–ª–µ–≥–∏ –∫–∞–∫ –≤ –†–æ—Å—Å–∏–∏, —Ç–∞–∫ –∏ –≤ –£–∫—Ä–∞–∏–Ω–µ. –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∏–∑ –Ω–∞—Å —Ä–æ–¥–∏–ª–∏—Å—å –≤ –†–æ—Å—Å–∏–∏. –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∏–∑ –Ω–∞—Å –∂–∏–≤—É—Ç –≤ –†–æ—Å—Å–∏–∏. –£ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –±–∞–±—É—à–∫–∏ –∏ –¥–µ–¥—É—à–∫–∏ —Å—Ä–∞–∂–∞–ª–∏—Å—å —Å —Ñ–∞—à–∏—Å—Ç–∞–º–∏ –≤–æ –í—Ç–æ—Ä–æ–π –º–∏—Ä–æ–≤–æ–π –≤–æ–π–Ω–µ. –ó–¥–µ—Å—å –Ω–∏–∫—Ç–æ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ñ–∞—à–∏–∑–º. –£ –æ–¥–Ω–æ–≥–æ –∏–∑ –Ω–∞—Å –µ—Å—Ç—å —É–∫—Ä–∞–∏–Ω—Å–∫–∞—è —Ä–æ–¥—Å—Ç–≤–µ–Ω–Ω–∏—Ü–∞, –∫–æ—Ç–æ—Ä–∞—è —Å–ø–∞—Å–ª–∞—Å—å –∏–∑ –¥–æ–º–∞ –≤–º–µ—Å—Ç–µ —Å —Å—ã–Ω–æ–º. –ü–æ–µ–∑–¥ –∑–∞–¥–µ—Ä–∂–∞–ª—Å—è –∏–∑-–∑–∞ –±–æ–º–±–µ–∂–∫–∏ –Ω–∞ –¥–æ—Ä–æ–≥–µ –≤–ø–µ—Ä–µ–¥–∏. –£ –Ω–∞—Å –µ—Å—Ç—å –¥—Ä—É–∑—å—è, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä—è—á—É—Ç—Å—è –≤ –±–æ–º–±–æ—É–±–µ–∂–∏—â–∞—Ö. –ú—ã —Å —Ç—Ä–µ–≤–æ–≥–æ–π –∂–¥–µ–º –≤–µ—Å—Ç–æ—á–∫–∏ –æ—Ç –Ω–∏—Ö –ø–æ—Å–ª–µ –≤–æ–∑–¥—É—à–Ω—ã—Ö –Ω–∞–ª–µ—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –±–µ—Å–ø–æ—Ä—è–¥–æ—á–Ω–æ –Ω–∞–Ω–æ—Å—è—Ç —É–¥–∞—Ä—ã –∏ –ø–æ–ø–∞–¥–∞—é—Ç –ø–æ –±–æ–ª—å–Ω–∏—Ü–∞–º, —à–∫–æ–ª–∞–º, –¥–µ—Ç—Å–∫–∏–º —Å–∞–¥–∞–º –∏ –¥–æ–º–∞–º. –ú—ã –Ω–µ –±–µ—Ä–µ–º —ç—Ç–æ –∏–∑ –∫–∞–∫–∏—Ö-–ª–∏–±–æ –°–ú–ò. –ú—ã –Ω–∞–±–ª—é–¥–∞–µ–º —ç—Ç–æ –Ω–∞–ø—Ä—è–º—É—é. –í—ã –¥–æ–≤–µ—Ä—è–µ—Ç–µ –Ω–∞–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ, —á—Ç–æ–± –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–∞—à–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã, –∏ –º—ã –ø—Ä–æ—Å–∏–º –≤–∞—Å –¥–æ–≤–µ—Ä–∏—Ç—å—Å—è –Ω–∞–º –≤–Ω–æ–≤—å. –ú—ã –Ω—É–∂–¥–∞–µ–º—Å—è –≤ –ø–æ–º–æ—â–∏. –í—ã—Ö–æ–¥–∏—Ç–µ –∏ –ø—Ä–æ—Ç–µ—Å—Ç—É–π—Ç–µ –ø—Ä–æ—Ç–∏–≤ —ç—Ç–æ–π –±–µ—Å–ø–æ–ª–µ–∑–Ω–æ–π –≤–æ–π–Ω—ã. –û—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∫—Ä–æ–≤–æ–ø—Ä–æ–ª–∏—Ç–∏–µ. –°–∫–∞–∂–∏—Ç–µ \"–ù–µ—Ç –≤–æ–π–Ω–µ!\"","title":"üá∑üá∫ –†—É—Å—Å–∫–∏–º –≥—Ä–∞–∂–¥–∞–Ω–∞–º"},{"location":"#to-citizens-of-russia","text":"We at Laminas come from all over the world. Many of us have friends, family and colleagues in both Russia and Ukraine. Some of us were born in Russia. Some of us currently live in Russia. Some have grandparents who fought Nazis in World War II. Nobody here supports fascism. One team member has a Ukrainian relative who fled her home with her son. The train was delayed due to bombing on the road ahead. We have friends who are hiding in bomb shelters. We anxiously follow up on them after the air raids, which indiscriminately fire at hospitals, schools, kindergartens and houses. We're not taking this from any media. These are our actual experiences. You trust us enough to use our software. We ask that you trust us to say the truth on this. We need your help. Go out and protest this unnecessary war. Stop the bloodshed. Say \"stop the war!\" laminas-paginator is a flexible component for paginating collections of data and presenting that data to users.","title":"üá∫üá∏ To Citizens of Russia"},{"location":"#installation","text":"Run the following to install this library: $ composer require laminas/laminas-paginator","title":"Installation"},{"location":"#documentation","text":"Browse the documentation online at https://docs.laminas.dev/laminas-paginator/","title":"Documentation"},{"location":"#support","text":"Issues Chat Forum","title":"Support"},{"location":"v2/advanced/","text":"Advanced usage Using the Paginator Adapter Plugin Manager laminas-paginator ships with a plugin manager for adapters, Laminas\\Paginator\\AdapterPluginManager . The plugin manager can be used to retrieve adapters. Since most adapters require constructor arguments, they may be passed as the second argument to the get() method in the same order they appear in the constructor. Examples use Laminas\\Paginator\\Adapter; use Laminas\\Paginator\\AdapterPluginManager; $pluginManager = new AdapterPluginManager(); // Get an array adapter for an array of items $arrayAdapter = $pluginManager-&gt;get(Adapter\\ArrayAdapter::class, [$arrayOfItems]); // Get a DbSelect adapter based on a Laminas\\Db\\Sql\\Select instance and a DB adapter: $dbSelectAdapter = $pluginManager-&gt;get(Adapter\\DbSelect::class, [ $select, $dbAdapter ]); // Get a DbTableGateway adapter based on a Laminas\\Db\\TableGateway\\TableGateway instance: $dbTDGAdapter = $pluginManager-&gt;get(Adapter\\DbTableGateway::class, [$tableGateway]); // Get an Iterator adapter based on an iterator: $iteratorAdapter = $pluginManager-&gt;get(Adapter\\Iterator::class, [$iterator]); Note : the laminas-db-based adapters are deprecated since version 2.10.0. Custom data source adapters At some point you may run across a data type that is not covered by the packaged adapters. In this case, you will need to write your own. To do so, you must implement Laminas\\Paginator\\Adapter\\AdapterInterface . There are two methods required to do this: count() : int getItems(int $offset, int $itemCountPerPage) | array Additionally, you'll typically implement a constructor that takes your data source as a parameter. If you've ever used the SPL interface Countable , you're familiar with count() . As used with laminas-paginator, this is the total number of items in the data collection; Laminas\\Paginator\\Paginator::countAllItems proxies to this method. When retrieving items for the current page, Laminas\\Paginator\\Paginator calls on your adapter's getItems() method, providing it with an offset and the number of items to display per page; your job is to return the appropriate slice of data. For an array, that would be: return array_slice($this-&gt;array, $offset, $itemCountPerPage); Take a look at the packaged adapters for ideas of how you might go about implementing your own. Registering Your Adapter with the Plugin Manager Available since version 2.10.0. If you want to register your adapter with the Laminas\\Pagiantor\\AdapterPluginManager , you can do so via configuration. The \"paginators\" configuration key can contain standard laminas-servicemanager-style configuration . One possibility is to add it to the config/autoload/global.php file: return [ // ... 'paginators' =&gt; [ 'factories' =&gt; [ YourCustomPaginationAdapter::class =&gt; YourCustomPaginationAdapterFactory::class, ], ], ]; This allows you to retrieve the AdapterPluginManager in a factory, and then pull your adapter from it. As an example, consider the following factory: use Laminas\\Paginator\\AdapterPluginManager; use Laminas\\Paginator\\Paginator; use Psr\\Container\\ContainerInterface; class SomeServiceFactory { public function __invoke(ContainerInterface $container) { $paginators = $container-&gt;get(AdapterPluginManager::class); $paginator = new Paginator($paginators-&gt;get(YourCustomPaginatorAdapter::class)); // ... } } Custom scrolling styles Creating your own scrolling style requires that you implement Laminas\\Paginator\\ScrollingStyle\\ScrollingStyleInterface , which defines a single method: getPages(Paginator $paginator, int $pageRange = null) : array This method should calculate a lower and upper bound for page numbers within the range of so-called \"local\" pages (that is, pages that are nearby the current page). Unless it extends another scrolling style (see Laminas\\Paginator\\ScrollingStyle\\Elastic for an example), your custom scrolling style will inevitably end with something similar to the following line of code: return $paginator-&gt;getPagesInRange($lowerBound, $upperBound); There's nothing special about this call; it's merely a convenience method to check the validity of the lower and upper bound and return an array with the range to the paginator. When you're ready to use your new scrolling style, you'll need to notif Laminas\\Paginator\\Paginator : use My\\Paginator\\ScrollingStyle; use Laminas\\Paginator\\Paginator; use Laminas\\ServiceManager\\Factory\\InvokableFactory; $manager = Paginator::getScrollingStyleManager(); $manager-&gt;setAlias('my-style', ScrollingStyle::class); $manager-&gt;setFactory(ScrollingStyle::class, InvokableFactory::class); Caching features Installation Requirements The caching features depends on the laminas-cache component, so be sure to have it installed before getting started: $ composer require laminas/laminas-cache Laminas\\Paginator\\Paginator can be told to cache the data it has already used, preventing the adapter from fetching on next request. To tell paginator to automatically cache the adapter's data, pass a pre-configured laminas-cache adapter to the static setCache() method: use Laminas\\Cache\\StorageFactory; use Laminas\\Paginator\\Paginator; $cache = StorageFactory::adapterFactory('filesystem', [ 'cache_dir' =&gt; '/tmp', 'ttl' =&gt; 3600, 'plugins' =&gt; [ 'serializer' ], ]); Paginator::setCache($cache); As long as the Paginator class has been seeded with a cache storage object, the data any instance generates will be cached. If you want to disable caching, call setCacheEnabled() with a boolean false on a concrete instance: use Laminas\\Paginator\\Paginator; // $cache is a Laminas\\Cache\\Storage\\StorageInterface instance Paginator::setCache($cache); // ... later on the script: $paginator-&gt;setCacheEnabled(false); // cache is now disabled for this instance. When a cache is set, data are automatically stored in it and pulled out from it. It then can be useful to empty the cache manually. You can get this done by calling clearPageItemCache($pageNumber) . If you don't pass any parameter, the whole cache will be empty. You can optionally pass a parameter representing the page number to empty in the cache: use Laminas\\Paginator\\Paginator; // $cache is a Laminas\\Cache\\Storage\\StorageInterface instance Paginator::setCache($cache); // $paginator is a fully configured Paginator instance: $items = $paginator-&gt;getCurrentItems(); $page3Items = $paginator-&gt;getItemsByPage(3); // page 3 is now in cache // clear the cache of the results for page 3 $paginator-&gt;clearPageItemCache(3); // clear all the cache data $paginator-&gt;clearPageItemCache(); Changing the item count per page will empty the whole cache as it would have become invalid: use Laminas\\Paginator\\Paginator; // $cache is a Laminas\\Cache\\Storage\\StorageInterface instance Paginator::setCache($cache); // Fetch some items from an instance: $items = $paginator-&gt;getCurrentItems(); // Changing item count flushes the cache: $paginator-&gt;setItemCountPerPage(2); It is also possible to see the data in cache and ask for it directly. getPageItemCache() can be used for that: use Laminas\\Paginator\\Paginator; // $cache is a Laminas\\Cache\\Storage\\StorageInterface instance Paginator::setCache($cache); // Set the item count: $paginator-&gt;setItemCountPerPage(3); // Fetch some items: $items = $paginator-&gt;getCurrentItems(); $otherItems = $paginator-&gt;getItemsPerPage(4); // See the cached items as a two-dimensional array: var_dump($paginator-&gt;getPageItemCache());","title":"Advanced Usage"},{"location":"v2/advanced/#advanced-usage","text":"","title":"Advanced usage"},{"location":"v2/advanced/#using-the-paginator-adapter-plugin-manager","text":"laminas-paginator ships with a plugin manager for adapters, Laminas\\Paginator\\AdapterPluginManager . The plugin manager can be used to retrieve adapters. Since most adapters require constructor arguments, they may be passed as the second argument to the get() method in the same order they appear in the constructor.","title":"Using the Paginator Adapter Plugin Manager"},{"location":"v2/advanced/#custom-data-source-adapters","text":"At some point you may run across a data type that is not covered by the packaged adapters. In this case, you will need to write your own. To do so, you must implement Laminas\\Paginator\\Adapter\\AdapterInterface . There are two methods required to do this: count() : int getItems(int $offset, int $itemCountPerPage) | array Additionally, you'll typically implement a constructor that takes your data source as a parameter. If you've ever used the SPL interface Countable , you're familiar with count() . As used with laminas-paginator, this is the total number of items in the data collection; Laminas\\Paginator\\Paginator::countAllItems proxies to this method. When retrieving items for the current page, Laminas\\Paginator\\Paginator calls on your adapter's getItems() method, providing it with an offset and the number of items to display per page; your job is to return the appropriate slice of data. For an array, that would be: return array_slice($this-&gt;array, $offset, $itemCountPerPage); Take a look at the packaged adapters for ideas of how you might go about implementing your own.","title":"Custom data source adapters"},{"location":"v2/advanced/#custom-scrolling-styles","text":"Creating your own scrolling style requires that you implement Laminas\\Paginator\\ScrollingStyle\\ScrollingStyleInterface , which defines a single method: getPages(Paginator $paginator, int $pageRange = null) : array This method should calculate a lower and upper bound for page numbers within the range of so-called \"local\" pages (that is, pages that are nearby the current page). Unless it extends another scrolling style (see Laminas\\Paginator\\ScrollingStyle\\Elastic for an example), your custom scrolling style will inevitably end with something similar to the following line of code: return $paginator-&gt;getPagesInRange($lowerBound, $upperBound); There's nothing special about this call; it's merely a convenience method to check the validity of the lower and upper bound and return an array with the range to the paginator. When you're ready to use your new scrolling style, you'll need to notif Laminas\\Paginator\\Paginator : use My\\Paginator\\ScrollingStyle; use Laminas\\Paginator\\Paginator; use Laminas\\ServiceManager\\Factory\\InvokableFactory; $manager = Paginator::getScrollingStyleManager(); $manager-&gt;setAlias('my-style', ScrollingStyle::class); $manager-&gt;setFactory(ScrollingStyle::class, InvokableFactory::class);","title":"Custom scrolling styles"},{"location":"v2/advanced/#caching-features","text":"","title":"Caching features"},{"location":"v2/configuration/","text":"Configuration Laminas\\Paginator has several configuration methods that can be called: Method signature Description setCurrentPageNumber(int $page) : void Sets the current page number (default 1). setItemCountPerPage(int $count) : void Sets the maximum number of items to display on a page (default 10). setPageRange(int $range) : void Sets the number of items to display in the pagination control (default 10). Note: Most of the time this number will be adhered to exactly, but scrolling styles do have the option of only using it as a guideline or starting value (e.g., Elastic). setView(Laminas\\View\\Renderer\\RendererInterface $view) : void Sets the view instance, for rendering convenience.","title":"Configuration"},{"location":"v2/configuration/#configuration","text":"Laminas\\Paginator has several configuration methods that can be called: Method signature Description setCurrentPageNumber(int $page) : void Sets the current page number (default 1). setItemCountPerPage(int $count) : void Sets the maximum number of items to display on a page (default 10). setPageRange(int $range) : void Sets the number of items to display in the pagination control (default 10). Note: Most of the time this number will be adhered to exactly, but scrolling styles do have the option of only using it as a guideline or starting value (e.g., Elastic). setView(Laminas\\View\\Renderer\\RendererInterface $view) : void Sets the view instance, for rendering convenience.","title":"Configuration"},{"location":"v2/installation/","text":"This is only a placeholder. The content of this page can be found under: https://github.com/laminas/documentation-theme/blob/master/theme/pages/installation.html","title":"Installation"},{"location":"v2/intro/","text":"Introduction laminas-paginator is a flexible component for paginating collections of data and presenting that data to users. The primary design goals of laminas-paginator are as follows: Paginate arbitrary data, not just relational databases. Fetch only the results that need to be displayed. Do not force users to adhere to only one way of displaying data or rendering pagination controls. Loosely couple to other Laminas components so that users who wish to use it independently of laminas-view, laminas-cache, etc. can do so.","title":"Introduction"},{"location":"v2/intro/#introduction","text":"laminas-paginator is a flexible component for paginating collections of data and presenting that data to users. The primary design goals of laminas-paginator are as follows: Paginate arbitrary data, not just relational databases. Fetch only the results that need to be displayed. Do not force users to adhere to only one way of displaying data or rendering pagination controls. Loosely couple to other Laminas components so that users who wish to use it independently of laminas-view, laminas-cache, etc. can do so.","title":"Introduction"},{"location":"v2/usage/","text":"Usage Paginating data collections In order to paginate items into pages, Laminas\\Paginator must have a generic way of accessing that data. For that reason, all data access takes place through data source adapters. Several adapters ship with laminas-paginator by default: Adapter Description ArrayAdapter Accepts a PHP array. DbSelect Accepts a Laminas\\Db\\Sql\\Select instance, plus either a Laminas\\Db\\Adapter\\Adapter or Laminas\\Db\\Sql\\Sql instance; paginates rows from a database. DbTableGateway Accepts a Laminas\\Db\\TableGateway\\AbstractTableGateway instance, and optionally additional arguments representing the WHERE, ORDER BY, GROUP BY, and/or HAVING clauases. Iterator Accepts any Iterator instance. NullFill Dummy paginator. To create a paginator instance, you must supply an adapter to the constructor: use Laminas\\Paginator\\Adapter; use Laminas\\Paginator\\Paginator; $paginator = new Paginator(new Adapter\\ArrayAdapter($array)); In the case of the NullFill adapter, in lieu of a data collection you must supply an item count to its constructor. Although the instance is technically usable in this state, in your controller action you'll need to tell the paginator what page number the user requested. This allows advancing through the paginated data. $paginator-&gt;setCurrentPageNumber($page); The simplest way to keep track of this value is through a URL parameter. The following is an example laminas-router route configuration: return [ 'routes' =&gt; [ 'paginator' =&gt; [ 'type' =&gt; 'segment', 'options' =&gt; [ 'route' =&gt; '/list/[page/:page]', 'defaults' =&gt; [ 'page' =&gt; 1, ], ], ], ], ]; With the above route (and using laminas-mvc controllers), you might set the current page number in your controller action like so: $paginator-&gt;setCurrentPageNumber($this-&gt;params()-&gt;fromRoute('page')); There are other options available; see the Configuration chapter for more on them. Finally, you'll need to assign the paginator instance to your view. If you're using laminas-mvc and laminas-view, you can assign the paginator object to your view model: $vm = new ViewModel(); $vm-&gt;setVariable('paginator', $paginator); return $vm; The DbSelect adapter Deprecated The adapter is deprecated since version 2.10.0. Please use the laminas/laminas-paginator-adapter-laminasdb package if you wish to use the laminas-db-based pagination adapters. Installation Requirements The DbSelect adapter depends on the laminas-db component, so be sure to have it installed before getting started: $ composer require laminas/laminas-db Database optimizations Instead of selecting every matching row of a given query, the DbSelect adapter retrieves only the smallest amount of data necessary for displaying the current page. Because of this, a second query is dynamically generated to determine the total number of matching rows. Most adapters receive their datasets directly. However, the DbSelect adapter requires a more detailed explanation regarding the retrieval and count of the data from the database. You do not have to retrieve data from the database prior to using the DbSelect adapter; the adapter will do the retrieval for you, as well as provide a count of total pages. If additional work has to be done on the database results which cannot be expressed via the provided Laminas\\Db\\Sql\\Select , object you must extend the adapter and override the getItems() method. Additionally this adapter does not fetch all records from the database in order to count them. Instead, the adapter manipulates the original query to produce a corresponding COUNT query, and uses the new query to get the number of rows. While this approach requires an extra round-trip to the database, doing so is stillmany times faster than fetching an entire result set and using count() , especially with large collections of data. The database adapter will try and build the most efficient query that will execute on pretty much any modern database. However, depending on your database or even your own schema setup, there might be more efficient ways to get a rowcount. There are two approaches for doing this. The first is to extend the DbSelect adapter and override the count() method: class MyDbSelect extends DbSelect { public function count() { if ($this-&gt;rowCount) { return $this-&gt;rowCount; } $select = new Select(); $select -&gt;from('item_counts') -&gt;columns(['c'=&gt;'post_count']); $statement = $this-&gt;sql-&gt;prepareStatementForSqlObject($select); $result = $statement-&gt;execute(); $row = $result-&gt;current(); $this-&gt;rowCount = $row['c']; return $this-&gt;rowCount; } } $adapter = new MyDbSelect($query, $adapter); Alternately, you can pass an additional Laminas\\Db\\Sql\\Select object as the fourth constructor argument to the DbSelect adapter to implement a custom count query. For example, if you keep track of the count of blog posts in a separate table, you could achieve a faster count query with the following setup: use Laminas\\Db\\Sql\\Select; use Laminas\\Paginator\\Adapter\\DbSelect; use Laminas\\Paginator\\Paginator; $countQuery = new Select(); $countQuery -&gt;from('item_counts') -&gt;columns([ DbSelect::ROW_COUNT_COLUMN_NAME =&gt; 'post_count' ]); $adapter = new DbSelect($query, $dbAdapter, null, $countQuery); $paginator = new Paginator($adapter); Alternatively, the same can be achieved using the provided factory: use Laminas\\Paginator\\Adapter\\DbSelect; use Laminas\\Paginator\\Factory as PaginatorFactory; $countQuery = new Select(); $countQuery -&gt;from('item_counts') -&gt;columns([ DbSelect::ROW_COUNT_COLUMN_NAME =&gt; 'post_count' ]); $paginator = PaginatorFactory::factory( [ $query, $dbAdapter, null, $countQuery, ], DbSelect::class ); This approach will probably not give you a huge performance gain on small collections and/or simple select queries. However, with complex queries and large collections, a similar approach could give you a significant performance boost. The DbSelect adapter also supports returning of fetched records using the ResultSet subcomponent of laminas-db . You can override the concrete ResultSet implementation by passing an object implementing Laminas\\Db\\ResultSet\\ResultSetInterface as the third constructor argument to the DbSelect adapter: use Laminas\\Db\\ResultSet\\HydratingResultSet; use Laminas\\Paginator\\Adapter\\DbSelect; use Laminas\\Paginator\\Paginator; // $objectPrototype is an instance of our custom entity // $hydrator is a custom hydrator for our entity // (implementing Laminas\\Hydrator\\HydratorInterface) $resultSet = new HydratingResultSet($hydrator, $objectPrototype); $adapter = new DbSelect($query, $dbAdapter, $resultSet) $paginator = new Laminas\\Paginator\\Paginator($adapter); Now when we iterate over $paginator we will get instances of our custom entity instead of associative arrays. Rendering pages with view scripts Installation Requirements The rendering with view scripts depends on the laminas-view component, so be sure to have it installed before getting started: $ composer require laminas/laminas-view The view script is used to render the page items (if you're using laminas-paginator to do so) and display the pagination control. Because Laminas\\Paginator\\Paginator implements the SPL interface IteratorAggregate , you can loop over an instance using foreach : &lt;html&gt; &lt;body&gt; &lt;h1&gt;Example&lt;/h1&gt; &lt;?php if (count($this-&gt;paginator)): ?&gt; &lt;ul&gt; &lt;?php foreach ($this-&gt;paginator as $item): ?&gt; &lt;li&gt;&lt;?= $item; ?&gt;&lt;/li&gt; &lt;?php endforeach; ?&gt; &lt;/ul&gt; &lt;?php endif; ?&gt; &lt;?= $this-&gt;paginationControl( $this-&gt;paginator, 'Sliding', 'my_pagination_control', ['route' =&gt; 'application/paginator'] ) ?&gt; &lt;/body&gt; &lt;/html&gt; Notice the view helper call near the end. PaginationControl accepts up to four parameters: the paginator instance, a scrolling style, a view script name, and an array of additional parameters. The second and third parameters are very important. Whereas the view script name is used to determine how the pagination control should look , the scrolling style is used to control how it should behave . Say the view script is in the style of a search pagination control, like the one below: What happens when the user clicks the \"next\" link a few times? Well, any number of things could happen: The current page number could stay in the middle as you click through (as it does on Yahoo!) It could advance to the end of the page range and then appear again on the left when the user clicks \"next\" one more time. The page numbers might even expand and contract as the user advances (or \"scrolls\") through them (as they do on Google). There are four scrolling styles packaged with Laminas: Scrolling style Description All Returns every page. This is useful for dropdown menu pagination controls with relatively few pages. In these cases, you want all pages available to the user at once. Elastic A Google-like scrolling style that expands and contracts as a user scrolls through the pages. Jumping As users scroll through, the page number advances to the end of a given range, then starts again at the beginning of the new range. Sliding A Yahoo!-like scrolling style that positions the current page number in the center of the page range, or as close as possible. This is the default style. The fourth and final parameter is reserved for an optional associative array of variables that you want available in your view (available via $this ). For instance, these values could include extra URL parameters for pagination links. By setting the default view script name, default scrolling style, and view instance, you can eliminate the calls to PaginationControl completely: use Laminas\\Paginator\\Paginator; use Laminas\\View\\Helper\\PaginationControl; Paginator::setDefaultScrollingStyle('Sliding'); PaginationControl::setDefaultViewPartial('my_pagination_control'); When all of these values are set, you can render the pagination control inside your view script by echoing the paginator instance: &lt;?= $this-&gt;paginator ?&gt; Using other template engines Of course, it's possible to use laminas-paginator with other template engines. For example, with Smarty you might do the following: $smarty-assign('pages', $paginator-&gt;getPages()); You could then access paginator values from a template like so: {$pages.pageCount} Example pagination controls The following example pagination controls will help you get started with laminas-view: Search pagination: &lt;!-- See http://developer.yahoo.com/ypatterns/pattern.php?pattern=searchpagination --&gt; &lt;?php if ($this-&gt;pageCount): ?&gt; &lt;div class=\"paginationControl\"&gt; &lt;!-- Previous page link --&gt; &lt;?php if (isset($this-&gt;previous)): ?&gt; &lt;a href=\"&lt;?= $this-&gt;url($this-&gt;route, ['page' =&gt; $this-&gt;previous]); ?&gt;\"&gt; &lt; Previous &lt;/a&gt; | &lt;?php else: ?&gt; &lt;span class=\"disabled\"&gt;&lt; Previous&lt;/span&gt; | &lt;?php endif; ?&gt; &lt;!-- Numbered page links --&gt; &lt;?php foreach ($this-&gt;pagesInRange as $page): ?&gt; &lt;?php if ($page != $this-&gt;current): ?&gt; &lt;a href=\"&lt;?= $this-&gt;url($this-&gt;route, ['page' =&gt; $page]); ?&gt;\"&gt; &lt;?= $page; ?&gt; &lt;/a&gt; | &lt;?php else: ?&gt; &lt;?= $page; ?&gt; | &lt;?php endif; ?&gt; &lt;?php endforeach; ?&gt; &lt;!-- Next page link --&gt; &lt;?php if (isset($this-&gt;next)): ?&gt; &lt;a href=\"&lt;?= $this-&gt;url($this-&gt;route, ['page' =&gt; $this-&gt;next]); ?&gt;\"&gt; Next &gt; &lt;/a&gt; &lt;?php else: ?&gt; &lt;span class=\"disabled\"&gt;Next &gt;&lt;/span&gt; &lt;?php endif; ?&gt; &lt;/div&gt; &lt;?php endif; ?&gt; Item pagination: &lt;!-- See http://developer.yahoo.com/ypatterns/pattern.php?pattern=itempagination --&gt; &lt;?php if ($this-&gt;pageCount): ?&gt; &lt;div class=\"paginationControl\"&gt; &lt;?= $this-&gt;firstItemNumber; ?&gt; - &lt;?= $this-&gt;lastItemNumber; ?&gt; of &lt;?= $this-&gt;totalItemCount; ?&gt; &lt;!-- First page link --&gt; &lt;?php if (isset($this-&gt;previous)): ?&gt; &lt;a href=\"&lt;?= $this-&gt;url($this-&gt;route, ['page' =&gt; $this-&gt;first]); ?&gt;\"&gt; First &lt;/a&gt; | &lt;?php else: ?&gt; &lt;span class=\"disabled\"&gt;First&lt;/span&gt; | &lt;?php endif; ?&gt; &lt;!-- Previous page link --&gt; &lt;?php if (isset($this-&gt;previous)): ?&gt; &lt;a href=\"&lt;?= $this-&gt;url($this-&gt;route, ['page' =&gt; $this-&gt;previous]); ?&gt;\"&gt; &lt; Previous &lt;/a&gt; | &lt;?php else: ?&gt; &lt;span class=\"disabled\"&gt;&lt; Previous&lt;/span&gt; | &lt;?php endif; ?&gt; &lt;!-- Next page link --&gt; &lt;?php if (isset($this-&gt;next)): ?&gt; &lt;a href=\"&lt;?= $this-&gt;url($this-&gt;route, ['page' =&gt; $this-&gt;next]); ?&gt;\"&gt; Next &gt; &lt;/a&gt; | &lt;?php else: ?&gt; &lt;span class=\"disabled\"&gt;Next &gt;&lt;/span&gt; | &lt;?php endif; ?&gt; &lt;!-- Last page link --&gt; &lt;?php if (isset($this-&gt;next)): ?&gt; &lt;a href=\"&lt;?= $this-&gt;url($this-&gt;route, ['page' =&gt; $this-&gt;last]); ?&gt;\"&gt; Last &lt;/a&gt; &lt;?php else: ?&gt; &lt;span class=\"disabled\"&gt;Last&lt;/span&gt; &lt;?php endif; ?&gt; &lt;/div&gt; &lt;?php endif; ?&gt; Dropdown pagination: &lt;?php if ($this-&gt;pageCount): ?&gt; &lt;select id=\"paginationControl\" size=\"1\"&gt; &lt;?php foreach ($this-&gt;pagesInRange as $page): ?&gt; &lt;?php $selected = ($page == $this-&gt;current) ? ' selected=\"selected\"' : ''; ?&gt; &lt;option value=\"&lt;?= $this-&gt;url($this-&gt;route, ['page' =&gt; $page]);?&gt;\"&lt;?= $selected ?&gt;&gt; &lt;?= $page; ?&gt; &lt;/option&gt; &lt;?php endforeach; ?&gt; &lt;/select&gt; &lt;?php endif; ?&gt; &lt;script type=\"text/javascript\" src=\"http://ajax.googleapis.com/ajax/libs/prototype/1.6.0.2/prototype.js\"&gt; &lt;/script&gt; &lt;script type=\"text/javascript\"&gt; $('paginationControl').observe('change', function() { window.location = this.options[this.selectedIndex].value; }) &lt;/script&gt; Listing of properties The following options are available to pagination control view scripts: Property Type Description first integer First page number (typically 1). firstItemNumber integer Absolute number of the first item on this page. firstPageInRange integer First page in the range returned by the scrolling style. current integer Current page number. currentItemCount integer Number of items on this page. itemCountPerPage integer Maximum number of items available to each page. last integer Last page number. lastItemNumber integer Absolute number of the last item on this page. lastPageInRange integer Last page in the range returned by the scrolling style. next integer Next page number. pageCount integer Number of pages. pagesInRange array Array of pages returned by the scrolling style. previous integer Previous page number. totalItemCount integer Total number of items.","title":"Usage"},{"location":"v2/usage/#usage","text":"","title":"Usage"},{"location":"v2/usage/#paginating-data-collections","text":"In order to paginate items into pages, Laminas\\Paginator must have a generic way of accessing that data. For that reason, all data access takes place through data source adapters. Several adapters ship with laminas-paginator by default: Adapter Description ArrayAdapter Accepts a PHP array. DbSelect Accepts a Laminas\\Db\\Sql\\Select instance, plus either a Laminas\\Db\\Adapter\\Adapter or Laminas\\Db\\Sql\\Sql instance; paginates rows from a database. DbTableGateway Accepts a Laminas\\Db\\TableGateway\\AbstractTableGateway instance, and optionally additional arguments representing the WHERE, ORDER BY, GROUP BY, and/or HAVING clauases. Iterator Accepts any Iterator instance. NullFill Dummy paginator. To create a paginator instance, you must supply an adapter to the constructor: use Laminas\\Paginator\\Adapter; use Laminas\\Paginator\\Paginator; $paginator = new Paginator(new Adapter\\ArrayAdapter($array)); In the case of the NullFill adapter, in lieu of a data collection you must supply an item count to its constructor. Although the instance is technically usable in this state, in your controller action you'll need to tell the paginator what page number the user requested. This allows advancing through the paginated data. $paginator-&gt;setCurrentPageNumber($page); The simplest way to keep track of this value is through a URL parameter. The following is an example laminas-router route configuration: return [ 'routes' =&gt; [ 'paginator' =&gt; [ 'type' =&gt; 'segment', 'options' =&gt; [ 'route' =&gt; '/list/[page/:page]', 'defaults' =&gt; [ 'page' =&gt; 1, ], ], ], ], ]; With the above route (and using laminas-mvc controllers), you might set the current page number in your controller action like so: $paginator-&gt;setCurrentPageNumber($this-&gt;params()-&gt;fromRoute('page')); There are other options available; see the Configuration chapter for more on them. Finally, you'll need to assign the paginator instance to your view. If you're using laminas-mvc and laminas-view, you can assign the paginator object to your view model: $vm = new ViewModel(); $vm-&gt;setVariable('paginator', $paginator); return $vm;","title":"Paginating data collections"},{"location":"v2/usage/#the-dbselect-adapter","text":"","title":"The DbSelect adapter"},{"location":"v2/usage/#rendering-pages-with-view-scripts","text":"","title":"Rendering pages with view scripts"},{"location":"v2/application-integration/stand-alone/","text":"Stand-Alone The paginator can also be used stand-alone, outside of a Mezzio or laminas-mvc application. The example uses the following directory structure: example-app/ |-- public/ | `-- index.php |-- templates/ | `-- pagination-control.phtml `-- vendor `-- ‚Ä¶ Create and Configure Paginator Create a paginator and a related adapter , set the item count for one page and the current page number in public/index.php : // Create paginator $paginator = new Laminas\\Paginator\\Paginator( new Laminas\\Paginator\\Adapter\\ArrayAdapter($albums) ); // Configure paginator $paginator-&gt;setItemCountPerPage(4); $paginator-&gt;setCurrentPageNumber((int) ($_GET['page'] ?? 1)); Example Data $albums = [ [ 'artist' =&gt; 'David Bowie', 'title' =&gt; 'The Next Day (Deluxe Version)', ], [ 'artist' =&gt; 'Bastille', 'title' =&gt; 'Bad Blood', ], [ 'artist' =&gt; 'Bruno Mars', 'title' =&gt; 'Unorthodox Jukebox', ], [ 'artist' =&gt; 'Emeli Sand√©', 'title' =&gt; 'Our Version of Events (Special Edition)', ], [ 'artist' =&gt; 'Bon Jovi', 'title' =&gt; 'What About Now (Deluxe Version)', ], [ 'artist' =&gt; 'Justin Timberlake', 'title' =&gt; 'The 20/20 Experience (Deluxe Version)', ], [ 'artist' =&gt; 'Bastille', 'title' =&gt; 'Bad Blood (The Extended Cut)', ], [ 'artist' =&gt; 'P!nk', 'title' =&gt; 'The Truth About Love', ], [ 'artist' =&gt; 'Sound City - Real to Reel', 'title' =&gt; 'Sound City - Real to Reel', ], [ 'artist' =&gt; 'Jake Bugg', 'title' =&gt; 'Jake Bugg', ], ]; Output Pure Data The data of each sub-array is returned by iteration over the paginator: foreach ($paginator as $item) { var_dump($item['artist']); // \"Bon Jovi\", \"Justin Timberlake\", ‚Ä¶ var_dump($item['title']); // \"What About Now (Deluxe Version)\", \"The 20/20 Experience (Deluxe Version)\", ‚Ä¶ } Retrieving the current status data of the paginator : var_dump($paginator-&gt;getPages()-&gt;previous); // 1 var_dump($paginator-&gt;getPages()-&gt;next); // 3 Usage with laminas-view Create View Script Create a view script in templates/pagination-control.phtml : &lt;?php /** * @var Laminas\\View\\Renderer\\PhpRenderer $this * @var int $pageCount * @var int $previous * @var int $next * @var int $current * @var array&lt;int, int&gt; $pagesInRange */ ?&gt; &lt;?php if ($pageCount): ?&gt; &lt;nav aria-label=\"Page navigation example\"&gt; &lt;ul class=\"pagination\"&gt; &lt;!-- Previous page link --&gt; &lt;?php if (isset($previous)): ?&gt; &lt;li class=\"page-item\"&gt; &lt;a class=\"page-link\" href=\"index.php?page=&lt;?= $previous ?&gt;\"&gt;Previous&lt;/a&gt; &lt;/li&gt; &lt;?php else: ?&gt; &lt;li class=\"page-item disabled\"&gt; &lt;a class=\"page-link\" href=\"#\" tabindex=\"-1\" aria-disabled=\"true\"&gt;Previous&lt;/a&gt; &lt;/li&gt; &lt;?php endif; ?&gt; &lt;!-- Numbered page links --&gt; &lt;?php foreach ($pagesInRange as $page): ?&gt; &lt;?php if ($page !== $current): ?&gt; &lt;li class=\"page-item\"&gt; &lt;a class=\"page-link\" href=\"index.php?page=&lt;?= $page ?&gt;\"&gt; &lt;?= $page ?&gt; &lt;/a&gt; &lt;/li&gt; &lt;?php else: ?&gt; &lt;!-- Current page --&gt; &lt;li class=\"page-item active\" aria-current=\"page\"&gt; &lt;a class=\"page-link\" href=\"#\"&gt;&lt;?= $page ?&gt; &lt;span class=\"sr-only\"&gt;(current)&lt;/span&gt;&lt;/a&gt; &lt;/li&gt; &lt;?php endif; ?&gt; &lt;?php endforeach; ?&gt; &lt;!-- Next page link --&gt; &lt;?php if (isset($this-&gt;next)): ?&gt; &lt;li class=\"page-item\"&gt; &lt;a class=\"page-link\" href=\"index.php?page=&lt;?= $next ?&gt;\"&gt;Next&lt;/a&gt; &lt;/li&gt; &lt;?php else: ?&gt; &lt;li class=\"page-item disabled\"&gt; &lt;a class=\"page-link\" href=\"#\" tabindex=\"-1\" aria-disabled=\"true\"&gt;Next&lt;/a&gt; &lt;/li&gt; &lt;?php endif; ?&gt; &lt;/ul&gt; &lt;/nav&gt; &lt;?php endif; ?&gt; Setup Set a resolver for templates and set template for the related view helper in public/index.php : // Create template resolver $templateResolver = new Laminas\\View\\Resolver\\TemplatePathStack([ 'script_paths' =&gt; [__DIR__ . '/../templates'], ]); // Setup renderer /** @var Laminas\\View\\Renderer\\PhpRenderer $renderer */ $renderer = $paginator-&gt;getView(); $renderer-&gt;setResolver($templateResolver); // Set template for related view helper $renderer-&gt;plugin('paginationControl')-&gt;setDefaultViewPartial('pagination-control'); Render Output echo $paginator-&gt;render(); Output: &lt;nav aria-label=\"Page navigation example\"&gt; &lt;ul class=\"pagination\"&gt; &lt;!-- Previous page link --&gt; &lt;li class=\"page-item\"&gt; &lt;a class=\"page-link\" href=\"index.php?page=1\"&gt;Previous&lt;/a&gt; &lt;/li&gt; &lt;!-- Numbered page links --&gt; &lt;li class=\"page-item\"&gt; &lt;a class=\"page-link\" href=\"index.php?page=1\"&gt; 1 &lt;/a&gt; &lt;/li&gt; &lt;!-- Current page --&gt; &lt;li class=\"page-item active\" aria-current=\"page\"&gt; &lt;a class=\"page-link\" href=\"#\"&gt;2 &lt;span class=\"sr-only\"&gt;(current)&lt;/span&gt;&lt;/a&gt; &lt;/li&gt; &lt;li class=\"page-item\"&gt; &lt;a class=\"page-link\" href=\"index.php?page=3\"&gt; 3 &lt;/a&gt; &lt;/li&gt; &lt;!-- Next page link --&gt; &lt;li class=\"page-item\"&gt; &lt;a class=\"page-link\" href=\"index.php?page=3\"&gt;Next&lt;/a&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/nav&gt; Show full code example &lt;?php require_once __DIR__ . '/../vendor/autoload.php'; $albums = [ [ 'artist' =&gt; 'David Bowie', 'title' =&gt; 'The Next Day (Deluxe Version)', ], [ 'artist' =&gt; 'Bastille', 'title' =&gt; 'Bad Blood', ], [ 'artist' =&gt; 'Bruno Mars', 'title' =&gt; 'Unorthodox Jukebox', ], [ 'artist' =&gt; 'Emeli Sand√©', 'title' =&gt; 'Our Version of Events (Special Edition)', ], [ 'artist' =&gt; 'Bon Jovi', 'title' =&gt; 'What About Now (Deluxe Version)', ], [ 'artist' =&gt; 'Justin Timberlake', 'title' =&gt; 'The 20/20 Experience (Deluxe Version)', ], [ 'artist' =&gt; 'Bastille', 'title' =&gt; 'Bad Blood (The Extended Cut)', ], [ 'artist' =&gt; 'P!nk', 'title' =&gt; 'The Truth About Love', ], [ 'artist' =&gt; 'Sound City - Real to Reel', 'title' =&gt; 'Sound City - Real to Reel', ], [ 'artist' =&gt; 'Jake Bugg', 'title' =&gt; 'Jake Bugg', ], ]; // Create paginator $paginator = new Laminas\\Paginator\\Paginator( new Laminas\\Paginator\\Adapter\\ArrayAdapter($albums) ); $paginator-&gt;setItemCountPerPage(4); $paginator-&gt;setCurrentPageNumber((int) ($_GET['page'] ?? 1)); // Create template resolver $templateResolver = new Laminas\\View\\Resolver\\TemplatePathStack([ 'script_paths' =&gt; [__DIR__ . '/../templates'], ]); // Setup renderer /** @var Laminas\\View\\Renderer\\PhpRenderer $renderer */ $renderer = $paginator-&gt;getView(); $renderer-&gt;setResolver($templateResolver); // Set template for related view helper $renderer-&gt;plugin('paginationControl')-&gt;setDefaultViewPartial('pagination-control'); // Render output echo $paginator-&gt;render();","title":"Stand-Alone"},{"location":"v2/application-integration/stand-alone/#stand-alone","text":"The paginator can also be used stand-alone, outside of a Mezzio or laminas-mvc application. The example uses the following directory structure: example-app/ |-- public/ | `-- index.php |-- templates/ | `-- pagination-control.phtml `-- vendor `-- ‚Ä¶","title":"Stand-Alone"},{"location":"v2/application-integration/stand-alone/#create-and-configure-paginator","text":"Create a paginator and a related adapter , set the item count for one page and the current page number in public/index.php : // Create paginator $paginator = new Laminas\\Paginator\\Paginator( new Laminas\\Paginator\\Adapter\\ArrayAdapter($albums) ); // Configure paginator $paginator-&gt;setItemCountPerPage(4); $paginator-&gt;setCurrentPageNumber((int) ($_GET['page'] ?? 1)); Example Data $albums = [ [ 'artist' =&gt; 'David Bowie', 'title' =&gt; 'The Next Day (Deluxe Version)', ], [ 'artist' =&gt; 'Bastille', 'title' =&gt; 'Bad Blood', ], [ 'artist' =&gt; 'Bruno Mars', 'title' =&gt; 'Unorthodox Jukebox', ], [ 'artist' =&gt; 'Emeli Sand√©', 'title' =&gt; 'Our Version of Events (Special Edition)', ], [ 'artist' =&gt; 'Bon Jovi', 'title' =&gt; 'What About Now (Deluxe Version)', ], [ 'artist' =&gt; 'Justin Timberlake', 'title' =&gt; 'The 20/20 Experience (Deluxe Version)', ], [ 'artist' =&gt; 'Bastille', 'title' =&gt; 'Bad Blood (The Extended Cut)', ], [ 'artist' =&gt; 'P!nk', 'title' =&gt; 'The Truth About Love', ], [ 'artist' =&gt; 'Sound City - Real to Reel', 'title' =&gt; 'Sound City - Real to Reel', ], [ 'artist' =&gt; 'Jake Bugg', 'title' =&gt; 'Jake Bugg', ], ];","title":"Create and Configure Paginator"},{"location":"v2/application-integration/stand-alone/#output-pure-data","text":"The data of each sub-array is returned by iteration over the paginator: foreach ($paginator as $item) { var_dump($item['artist']); // \"Bon Jovi\", \"Justin Timberlake\", ‚Ä¶ var_dump($item['title']); // \"What About Now (Deluxe Version)\", \"The 20/20 Experience (Deluxe Version)\", ‚Ä¶ } Retrieving the current status data of the paginator : var_dump($paginator-&gt;getPages()-&gt;previous); // 1 var_dump($paginator-&gt;getPages()-&gt;next); // 3","title":"Output Pure Data"},{"location":"v2/application-integration/stand-alone/#usage-with-laminas-view","text":"","title":"Usage with laminas-view"}]}